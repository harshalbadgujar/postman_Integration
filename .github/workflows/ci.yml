name: Postman Tests Pipeline

# 1. Trigger when code is pushed to a specific branch or Postman script changes
on:
  push:
    branches:
      - 'main' # Replace with the name of your specific branch
    paths:
      - 'postman/*.json'  # Path to your Postman collection and environment files (or adjust as per your repo structure)
      - '**/*.js'         # Path to trigger when any code changes

  workflow_dispatch:  # Add this to enable manual triggering of the workflow

jobs:
  run_newman_tests:  # Correct indentation here
    runs-on: ubuntu-latest

    steps:
    
      # Add this step before pushing to a branch
      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      # 2. Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2
        
       # Add this step to use GITHUB_TOKEN for authentication
      - name: Push changes to repository
        run: |
          git add .
          git commit -m "Auto-commit: Upload Allure Report"
          git push origin gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  

      # 3. Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      # 4. Install Newman
      - name: Install Newman
        run: npm install -g newman

      # 5. Execute Newman to run Postman tests
      - name: Run Postman collection tests with Newman
        run: |
          newman run BaaS_Dev.postman_collection.json \
            --folder "IntegrationTests" \
            -e DevelopmentConsolidated.postman_environment.json --ignore-redirects \
            --reporters cli,junit \
            --reporter-junit-export results.xml
            
      # 6. Install Allure for report generation
      - name: Install Allure
        run: |
          curl -o allure.tgz -L https://github.com/allure-framework/allure2/releases/download/2.20.1/allure-2.20.1.tgz
          tar -zxvf allure.tgz
          sudo mv allure-2.20.1 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure

      # 7. Generate Allure report from the Newman JUnit XML
      - name: Generate Allure Report
        run: |
          allure generate --clean ./results.xml -o allure-report
          
      # 8. Deploy Allure Report to GitHub Pages
      - name: Deploy to GitHub Pages
        run: |
          git config --global user.email "harshalbadgujar75@gmail.com"
          git config --global user.name "harshalbadgujar"
          git clone --branch gh-pages https://github.com/${{ github.repository }} gh-pages
          rm -rf gh-pages/*
          cp -r allure-report/* gh-pages/
          cd gh-pages
          git add .
          git commit -m "Update Allure Report"
          git push origin gh-pages

      # 9. Post a Comment with Link to the Report
      - name: Post a comment with report link
        uses: actions/github-script@v3
        with:
          script: |
            const repo = context.payload.repository;
            const report_url = `https://${repo.owner.login}.github.io/${repo.name}`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: repo.owner.login,
              repo: repo.name,
              body: `âœ… [Allure Report](${report_url}) is available.`
            })
          
      # 10. Mark the workflow status green or red based on test results
      - name: Set status based on Newman result (failure)
        if: failure()
        run: echo "Some tests have failed. Check the results."

      - name: Set status based on Newman result (success)
        if: success()
        run: echo "All tests passed successfully!"
