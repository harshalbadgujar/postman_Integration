name: Postman Tests Pipeline

# 1. Trigger when code is pushed to a specific branch or Postman script changes
on:
  push:
    branches:
      - 'main' # Replace with the name of your specific branch
    paths:
      - 'postman/*.json'   # Path to your Postman collection and environment files (or adjust as per your repo structure)
      - '**/*.js'          # Path to trigger when any code changes
      
# Add this to enable manual triggering of the workflow
  workflow_dispatch:
jobs:
  run-newman-tests:  # Make sure this indentation is correct
    runs-on: ubuntu-latest

    steps:
      # 2. Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # 3. Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

    # 4. Install Newman
    - name: Install Newman
      run: npm install -g newman

    # Execute Newman to run Postman tests
    - name: Run Postman collection tests with Newman
      run: |
        newman run postman/BaaS Dev.postman_collection.json \
        --folder "IntegrationTests" \
        -e postman/DevelopmentConsolidated.postman_environment.json \
        --reporters cli,junit \
        --reporter-junit-export results.xml
      continue-on-error: false # This will make the pipeline fail if tests fail


    # 6. Upload test results (Optional - for viewing JUnit reports)
    - name: Upload Test Results
      if: always()  # Ensure this step runs even if tests fail
      uses: actions/upload-artifact@v2
      with:
        name: newman-test-results
        path: results.xml

    # 7. Mark the workflow status green or red based on test results
    - name: Set status for failed tests
    if: failure()  # Check if the tests failed
    run: echo "Some tests have failed. Check the results."

    - name: Set status for successful tests
    if: success()  # Check if the tests passed
    run: echo "All tests passed successfully!"
